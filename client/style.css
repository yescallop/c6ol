body {
  /* Remove the default 8px margin from body. */
  margin: 0;
  background-color: #fc6;
  font-family: sans-serif;

  /* Avoid refresh on overscroll. */
  overscroll-behavior-y: contain;
}

body::backdrop {
  background-color: #fc6;
}

/* Use `svh` to prevent overflow on mobile due to the hidable address bar. */
@supports (height: 100svh) {
  body {
    height: 100svh;
  }
}

/* Old browsers might not support `svh`. */
@supports not (height: 100svh) {
  body {
    height: 100vh;
  }
}

dialog {
  max-width: 15em;
}

.game-menu {
  min-width: 11em;
}

.transparent {
  opacity: 75%;
}

p {
  margin-top: 0;
  margin-bottom: 8px;
  text-align: center;
}

.title {
  font-weight: bold;
}

a {
  color: blue;
}

input[type="text"] {
  text-align: center;
  /* More consistent than the `size` attribute. */
  width: 9em;
}

button {
  width: 100%;
  user-select: none;
  white-space: nowrap;
}

.pushed {
  border-style: inset;
}

.prominent {
  border-style: dotted;
}

.menu-btn-group {
  display: flex;
  flex-direction: column;
}

.menu-btn-group>.btn-group {
  margin-top: 0;
}

.menu-btn-group>*:not(:last-child) {
  margin-bottom: 5px;
}

.radio-group {
  margin-bottom: 5px;
  display: flex;
  justify-content: center;
}

.radio-group>*:not(:last-child) {
  margin-right: 10px;
}

.btn-group {
  margin-top: 10px;
  display: flex;
  justify-content: space-evenly;
}

.btn-group:not(.reversed)>*:not(:last-child) {
  margin-right: 10px;
}

.btn-group.reversed {
  /* Show the default button (first in tree order) on the right. */
  flex-direction: row-reverse;
}

.btn-group.reversed>*:not(:last-child) {
  margin-left: 10px;
}

.view-container {
  height: 100%;

  /*
    Touch input by default triggers browser behavior such as refresh and zooming.
    Disable it to make the pointer events fire.
  */
  touch-action: none;
}

.view {
  /* Make the viewport fit the container. */
  display: block;
  width: 100%;
  height: 100%;

  /*
    `pointerleave` events are not fired correctly on an SVG element on mobile.
    So disable pointer events on it and listen on the container instead.
  */
  pointer-events: none;

  /* Avoid selecting the element on WebKit. */
  -webkit-user-select: none;
}